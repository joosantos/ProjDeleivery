"""Create DB

Revision ID: d74999d0ff55
Revises: f685f563f652
Create Date: 2023-03-21 15:16:39.791826

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd74999d0ff55'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('zip_code', sa.String(length=10), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('district', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_address_id'), 'address', ['id'], unique=False)
    op.create_table('belts',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_belts_id'), 'belts', ['id'], unique=False)
    op.create_index(op.f('ix_belts_name'), 'belts', ['name'], unique=False)
    op.create_index(op.f('ix_belts_order'), 'belts', ['order'], unique=False)
    op.create_table('category_types',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=1023), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_category_types_description'), 'category_types', ['description'], unique=False)
    op.create_index(op.f('ix_category_types_id'), 'category_types', ['id'], unique=False)
    op.create_index(op.f('ix_category_types_name'), 'category_types', ['name'], unique=False)
    op.create_table('competitions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('inscriptions_start', sa.DateTime(), nullable=True),
    sa.Column('inscriptions_end', sa.DateTime(), nullable=True),
    sa.Column('competition_start', sa.DateTime(), nullable=True),
    sa.Column('competition_end', sa.DateTime(), nullable=True),
    sa.Column('show_public', sa.Boolean(), nullable=True),
    sa.Column('calculate_age_start_year', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_competitions_id'), 'competitions', ['id'], unique=False)
    op.create_index(op.f('ix_competitions_name'), 'competitions', ['name'], unique=False)
    op.create_table('identification_document',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('number', sa.String(), nullable=True),
    sa.Column('emitted_by', sa.String(), nullable=True),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_identification_document_id'), 'identification_document', ['id'], unique=False)
    op.create_table('insurance_groups',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insurance_groups_id'), 'insurance_groups', ['id'], unique=False)
    op.create_index(op.f('ix_insurance_groups_name'), 'insurance_groups', ['name'], unique=False)
    op.create_table('insurance_types',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.Column('fee', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insurance_types_id'), 'insurance_types', ['id'], unique=False)
    op.create_index(op.f('ix_insurance_types_name'), 'insurance_types', ['name'], unique=False)
    op.create_table('insured_types',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insured_types_id'), 'insured_types', ['id'], unique=False)
    op.create_index(op.f('ix_insured_types_name'), 'insured_types', ['name'], unique=False)
    op.create_table('insured_entities',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('insured_type_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('athlete_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('team_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['insured_type_id'], ['insured_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insured_entities_id'), 'insured_entities', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=1024), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=False)
    op.create_table('private_info',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('nationality', sa.String(), nullable=True),
    sa.Column('natural_region', sa.String(), nullable=True),
    sa.Column('natural_country', sa.String(), nullable=True),
    sa.Column('gender_is_male', sa.String(), nullable=True),
    sa.Column('nif', sa.String(length=20), nullable=True),
    sa.Column('federation_number', sa.Integer(), nullable=True),
    sa.Column('federation_active', sa.Boolean(), nullable=True),
    sa.Column('identification_document_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['identification_document_id'], ['identification_document.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_private_info_email'), 'private_info', ['email'], unique=False)
    op.create_index(op.f('ix_private_info_id'), 'private_info', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=True),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('admin_verified', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('insured_entity_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('private_info_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['insured_entity_id'], ['insured_entities.id'], ),
    sa.ForeignKeyConstraint(['private_info_id'], ['private_info.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('abbreviation', sa.String(length=255), nullable=True),
    sa.Column('association', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('coach_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('insured_entity_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['coach_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['insured_entity_id'], ['insured_entities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teams_id'), 'teams', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=False)
    op.create_table('athlete_competitions',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('competition_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_athlete_competitions_id'), 'athlete_competitions', ['id'], unique=False)
    op.create_table('categories',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('third_place', sa.Boolean(), nullable=True),
    sa.Column('three_points', sa.Boolean(), nullable=True),
    sa.Column('rounds', sa.Boolean(), nullable=True),
    sa.Column('penalties', sa.Boolean(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('number_all_at_once', sa.Boolean(), nullable=True),
    sa.Column('team_category', sa.Boolean(), nullable=True),
    sa.Column('team_number', sa.Integer(), nullable=True),
    sa.Column('category_type_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['category_type_id'], ['category_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=False)
    op.create_index(op.f('ix_categories_number_all_at_once'), 'categories', ['number_all_at_once'], unique=False)
    op.create_index(op.f('ix_categories_penalties'), 'categories', ['penalties'], unique=False)
    op.create_index(op.f('ix_categories_rounds'), 'categories', ['rounds'], unique=False)
    op.create_index(op.f('ix_categories_team_category'), 'categories', ['team_category'], unique=False)
    op.create_index(op.f('ix_categories_third_place'), 'categories', ['third_place'], unique=False)
    op.create_index(op.f('ix_categories_three_points'), 'categories', ['three_points'], unique=False)
    op.create_table('insurances',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('insurance_start_date', sa.DateTime(), nullable=True),
    sa.Column('insurance_end_date', sa.DateTime(), nullable=True),
    sa.Column('insured_entity_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('insurance_type_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('insurance_group_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['insurance_group_id'], ['insurance_groups.id'], ),
    sa.ForeignKeyConstraint(['insurance_type_id'], ['insurance_types.id'], ),
    sa.ForeignKeyConstraint(['insured_entity_id'], ['insured_entities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_insurances_id'), 'insurances', ['id'], unique=False)
    op.create_table('responsible',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('relationship', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('identification_document_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['identification_document_id'], ['identification_document.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_responsible_id'), 'responsible', ['id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('athletes',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('birthday', sa.DateTime(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('is_male', sa.Boolean(), nullable=True),
    sa.Column('is_adapted', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('team_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('insured_entity_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('belt_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('private_info_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('address_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('responsible_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['address.id'], ),
    sa.ForeignKeyConstraint(['belt_id'], ['belts.id'], ),
    sa.ForeignKeyConstraint(['insured_entity_id'], ['insured_entities.id'], ),
    sa.ForeignKeyConstraint(['private_info_id'], ['private_info.id'], ),
    sa.ForeignKeyConstraint(['responsible_id'], ['responsible.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_foreign_key(
        None, "users", "insured_entities", ["insured_entity_id"], ["id"]
    )
    op.create_index(op.f('ix_athletes_id'), 'athletes', ['id'], unique=False)
    op.create_index(op.f('ix_athletes_name'), 'athletes', ['name'], unique=False)
    op.create_table('federation_request',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('status', sa.Enum('pending', 'accepted', 'denied', 'cancelled', 'requested', 'other', name='federationrequestsenum'), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('athlete_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('athlete_id', 'year')
    )
    op.create_index(op.f('ix_federation_request_id'), 'federation_request', ['id'], unique=False)
    op.create_table('athletes_groups',
    sa.Column('athlete_competition_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('athlete_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['athlete_competition_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.PrimaryKeyConstraint('athlete_competition_id', 'athlete_id')
    )
    op.create_table('tournaments',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('day', sa.Integer(), nullable=True),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.Column('morning', sa.Boolean(), nullable=True),
    sa.Column('is_male', sa.Boolean(), nullable=True),
    sa.Column('age_min', sa.Integer(), nullable=True),
    sa.Column('age_max', sa.Integer(), nullable=True),
    sa.Column('weight_min', sa.Integer(), nullable=True),
    sa.Column('weight_max', sa.Integer(), nullable=True),
    sa.Column('belt', sa.String(length=255), nullable=True),
    sa.Column('central_referee', sa.String(length=255), nullable=True),
    sa.Column('judge1', sa.String(length=255), nullable=True),
    sa.Column('judge2', sa.String(length=255), nullable=True),
    sa.Column('area', sa.String(length=255), nullable=True),
    sa.Column('competition_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('category_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('first_place_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('second_place_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('third_place_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('belt_min_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('belt_max_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('printed', sa.Boolean(), nullable=True),
    sa.Column('podium_notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['belt_max_id'], ['belts.id'], ),
    sa.ForeignKeyConstraint(['belt_min_id'], ['belts.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], ),
    sa.ForeignKeyConstraint(['first_place_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['second_place_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['third_place_id'], ['athlete_competitions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tournaments_area'), 'tournaments', ['area'], unique=False)
    op.create_index(op.f('ix_tournaments_central_referee'), 'tournaments', ['central_referee'], unique=False)
    op.create_index(op.f('ix_tournaments_id'), 'tournaments', ['id'], unique=False)
    op.create_index(op.f('ix_tournaments_judge1'), 'tournaments', ['judge1'], unique=False)
    op.create_index(op.f('ix_tournaments_judge2'), 'tournaments', ['judge2'], unique=False)
    op.create_table('inscriptions',
    sa.Column('tournament_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('athlete_competition_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('confirmed', sa.Boolean(), nullable=True),
    sa.Column('accepted', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_competition_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('tournament_id', 'athlete_competition_id')
    )
    op.create_index(op.f('ix_inscriptions_athlete_competition_id'), 'inscriptions', ['athlete_competition_id'], unique=False)
    op.create_index(op.f('ix_inscriptions_tournament_id'), 'inscriptions', ['tournament_id'], unique=False)
    op.create_table('matches',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('number_by_area', sa.Integer(), nullable=True),
    sa.Column('points_red_total', sa.Float(), nullable=True),
    sa.Column('points_red_central_referee_round1', sa.Float(), nullable=True),
    sa.Column('points_red_judge1_round1', sa.Float(), nullable=True),
    sa.Column('points_red_judge2_round1', sa.Float(), nullable=True),
    sa.Column('points_red_central_referee_round2', sa.Float(), nullable=True),
    sa.Column('points_red_judge1_round2', sa.Float(), nullable=True),
    sa.Column('points_red_judge2_round2', sa.Float(), nullable=True),
    sa.Column('points_blue_total', sa.Float(), nullable=True),
    sa.Column('points_blue_central_referee_round1', sa.Float(), nullable=True),
    sa.Column('points_blue_judge1_round1', sa.Float(), nullable=True),
    sa.Column('points_blue_judge2_round1', sa.Float(), nullable=True),
    sa.Column('points_blue_central_referee_round2', sa.Float(), nullable=True),
    sa.Column('points_blue_judge1_round2', sa.Float(), nullable=True),
    sa.Column('points_blue_judge2_round2', sa.Float(), nullable=True),
    sa.Column('normal_win', sa.Boolean(), nullable=True),
    sa.Column('abdicate_win', sa.Boolean(), nullable=True),
    sa.Column('no_show_win', sa.Boolean(), nullable=True),
    sa.Column('disqualified_win', sa.Boolean(), nullable=True),
    sa.Column('call_request', sa.Boolean(), nullable=True),
    sa.Column('number_call_request', sa.Integer(), nullable=True),
    sa.Column('calls_made', sa.Integer(), nullable=True),
    sa.Column('area_to_call', sa.String(), nullable=True),
    sa.Column('description_to_micro', sa.String(), nullable=True),
    sa.Column('call_type', sa.String(), nullable=True),
    sa.Column('call_request_fireman', sa.Boolean(), nullable=True),
    sa.Column('call_request_clean', sa.Boolean(), nullable=True),
    sa.Column('winner_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('athlete_red_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('athlete_blue_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('tournament_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_blue_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['athlete_red_id'], ['athlete_competitions.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['athlete_competitions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_matches_id'), 'matches', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_matches_id'), table_name='matches')
    op.drop_table('matches')
    op.drop_index(op.f('ix_inscriptions_tournament_id'), table_name='inscriptions')
    op.drop_index(op.f('ix_inscriptions_athlete_competition_id'), table_name='inscriptions')
    op.drop_table('inscriptions')
    op.drop_index(op.f('ix_tournaments_judge2'), table_name='tournaments')
    op.drop_index(op.f('ix_tournaments_judge1'), table_name='tournaments')
    op.drop_index(op.f('ix_tournaments_id'), table_name='tournaments')
    op.drop_index(op.f('ix_tournaments_central_referee'), table_name='tournaments')
    op.drop_index(op.f('ix_tournaments_area'), table_name='tournaments')
    op.drop_table('tournaments')
    op.drop_table('athletes_groups')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_responsible_id'), table_name='responsible')
    op.drop_table('responsible')
    op.drop_index(op.f('ix_private_info_id'), table_name='private_info')
    op.drop_index(op.f('ix_private_info_email'), table_name='private_info')
    op.drop_table('private_info')
    op.drop_index(op.f('ix_insurances_id'), table_name='insurances')
    op.drop_table('insurances')
    op.drop_index(op.f('ix_federation_request_id'), table_name='federation_request')
    op.drop_table('federation_request')
    op.drop_index(op.f('ix_categories_three_points'), table_name='categories')
    op.drop_index(op.f('ix_categories_third_place'), table_name='categories')
    op.drop_index(op.f('ix_categories_team_category'), table_name='categories')
    op.drop_index(op.f('ix_categories_rounds'), table_name='categories')
    op.drop_index(op.f('ix_categories_penalties'), table_name='categories')
    op.drop_index(op.f('ix_categories_number_all_at_once'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_athlete_competitions_id'), table_name='athlete_competitions')
    op.drop_table('athlete_competitions')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_teams_id'), table_name='teams')
    op.drop_table('teams')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_insured_types_name'), table_name='insured_types')
    op.drop_index(op.f('ix_insured_types_id'), table_name='insured_types')
    op.drop_table('insured_types')
    op.drop_index(op.f('ix_insured_entities_id'), table_name='insured_entities')
    op.drop_table('insured_entities')
    op.drop_index(op.f('ix_insurance_types_name'), table_name='insurance_types')
    op.drop_index(op.f('ix_insurance_types_id'), table_name='insurance_types')
    op.drop_table('insurance_types')
    op.drop_index(op.f('ix_insurance_groups_name'), table_name='insurance_groups')
    op.drop_index(op.f('ix_insurance_groups_id'), table_name='insurance_groups')
    op.drop_table('insurance_groups')
    op.drop_index(op.f('ix_identification_document_id'), table_name='identification_document')
    op.drop_table('identification_document')
    op.drop_index(op.f('ix_competitions_name'), table_name='competitions')
    op.drop_index(op.f('ix_competitions_id'), table_name='competitions')
    op.drop_table('competitions')
    op.drop_index(op.f('ix_category_types_name'), table_name='category_types')
    op.drop_index(op.f('ix_category_types_id'), table_name='category_types')
    op.drop_index(op.f('ix_category_types_description'), table_name='category_types')
    op.drop_table('category_types')
    op.drop_index(op.f('ix_belts_order'), table_name='belts')
    op.drop_index(op.f('ix_belts_name'), table_name='belts')
    op.drop_index(op.f('ix_belts_id'), table_name='belts')
    op.drop_table('belts')
    op.drop_index(op.f('ix_athletes_name'), table_name='athletes')
    op.drop_index(op.f('ix_athletes_id'), table_name='athletes')
    op.drop_table('athletes')
    op.drop_index(op.f('ix_address_id'), table_name='address')
    op.drop_table('address')
    # ### end Alembic commands ###
